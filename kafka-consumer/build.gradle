plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id "com.github.davidmc24.gradle.plugin.avro-base" version "1.9.1"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven { url "https://packages.confluent.io/maven/" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.avro:avro:1.12.0'
    implementation 'io.confluent:kafka-avro-serializer:7.9.0'
    implementation 'io.zipkin.contrib.otel:encoder-brave:0.1.0'
    implementation 'io.zipkin.brave:brave:6.0.3'
    implementation 'io.zipkin.brave:brave-instrumentation-http:6.0.3'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly "com.github.loki4j:loki-logback-appender:1.5.2"
    runtimeOnly 'io.micrometer:micrometer-registry-otlp'
    implementation 'io.opentelemetry:opentelemetry-context'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
//    implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
//    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'com.google.protobuf:protobuf-java:4.30.1'
    implementation 'com.google.protobuf:protobuf-java-util:4.30.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

apply plugin: "java"
apply plugin: "com.github.davidmc24.gradle.plugin.avro-base"

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
    source("src/main/avro")
    outputDir = file("src/main/java")
}

tasks.named("compileJava").configure {
    source(generateAvro)
}