// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: src/main/resources/otel-proto/trace.proto
// Protobuf Java Version: 4.29.3

package io.opentelemetry.proto.trace.v1;

public interface ScopeSpansOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opentelemetry.proto.trace.v1.ScopeSpans)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The instrumentation scope information for the spans in this message.
   * Semantically when InstrumentationScope isn't set, it is equivalent with
   * an empty instrumentation scope name (unknown).
   * </pre>
   *
   * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
   * @return Whether the scope field is set.
   */
  boolean hasScope();
  /**
   * <pre>
   * The instrumentation scope information for the spans in this message.
   * Semantically when InstrumentationScope isn't set, it is equivalent with
   * an empty instrumentation scope name (unknown).
   * </pre>
   *
   * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
   * @return The scope.
   */
  io.opentelemetry.proto.common.v1.InstrumentationScope getScope();
  /**
   * <pre>
   * The instrumentation scope information for the spans in this message.
   * Semantically when InstrumentationScope isn't set, it is equivalent with
   * an empty instrumentation scope name (unknown).
   * </pre>
   *
   * <code>.opentelemetry.proto.common.v1.InstrumentationScope scope = 1;</code>
   */
  io.opentelemetry.proto.common.v1.InstrumentationScopeOrBuilder getScopeOrBuilder();

  /**
   * <pre>
   * A list of Spans that originate from an instrumentation scope.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span spans = 2;</code>
   */
  java.util.List<io.opentelemetry.proto.trace.v1.Span> 
      getSpansList();
  /**
   * <pre>
   * A list of Spans that originate from an instrumentation scope.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span spans = 2;</code>
   */
  io.opentelemetry.proto.trace.v1.Span getSpans(int index);
  /**
   * <pre>
   * A list of Spans that originate from an instrumentation scope.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span spans = 2;</code>
   */
  int getSpansCount();
  /**
   * <pre>
   * A list of Spans that originate from an instrumentation scope.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span spans = 2;</code>
   */
  java.util.List<? extends io.opentelemetry.proto.trace.v1.SpanOrBuilder> 
      getSpansOrBuilderList();
  /**
   * <pre>
   * A list of Spans that originate from an instrumentation scope.
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.trace.v1.Span spans = 2;</code>
   */
  io.opentelemetry.proto.trace.v1.SpanOrBuilder getSpansOrBuilder(
      int index);

  /**
   * <pre>
   * The Schema URL, if known. This is the identifier of the Schema that the span data
   * is recorded in. Notably, the last part of the URL path is the version number of the
   * schema: http[s]://server[:port]/path/&lt;version&gt;. To learn more about Schema URL see
   * https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
   * This schema_url applies to all spans and span events in the "spans" field.
   * </pre>
   *
   * <code>string schema_url = 3;</code>
   * @return The schemaUrl.
   */
  java.lang.String getSchemaUrl();
  /**
   * <pre>
   * The Schema URL, if known. This is the identifier of the Schema that the span data
   * is recorded in. Notably, the last part of the URL path is the version number of the
   * schema: http[s]://server[:port]/path/&lt;version&gt;. To learn more about Schema URL see
   * https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
   * This schema_url applies to all spans and span events in the "spans" field.
   * </pre>
   *
   * <code>string schema_url = 3;</code>
   * @return The bytes for schemaUrl.
   */
  com.google.protobuf.ByteString
      getSchemaUrlBytes();
}
