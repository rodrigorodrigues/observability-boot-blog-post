services:
#    collector:
#        image: otel/opentelemetry-collector:0.103.1
#        extra_hosts: ['host.docker.internal:host-gateway']
#        volumes:
#            - ./docker/otel-collector/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
#        ports:
#            - 1888:1888 # pprof extension
#            - 8888:8888 # Prometheus metrics exposed by the collector
#            - 8889:8889 # Prometheus exporter metrics
#            - 13133:13133 # health_check extension
#            - 4318:4318 # OTLP http receiver (for metrics and spans)
#            - 55679:55679 # zpages extension
    zookeeper:
        image: bitnami/zookeeper #antrea/confluentinc-zookeeper:6.2.0
        hostname: zookeeper
        container_name: zookeeper
        ports:
            - '2181:2181'
        environment:
          #      ZOOKEEPER_CLIENT_PORT: 2181
          #      ZOOKEEPER_TICK_TIME: 2000
            ALLOW_ANONYMOUS_LOGIN: "yes"

    kafka:
        image: bitnami/kafka #antrea/confluentinc-kafka:6.2.0
        hostname: kafka
        container_name: kafka
        depends_on:
            - zookeeper
        ports:
            - '9092:9092'
          #      - '9101:9101'
        environment:
          KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://kafka:9094
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
          KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper

    schema-registry:
        image: docker.io/bitnami/schema-registry:7.5
        container_name: schema-registry
        ports:
            - '8081:8081'
        depends_on:
            - kafka
        environment:
            - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
            - SCHEMA_REGISTRY_KAFKA_BROKERS=PLAINTEXT://kafka:9092

    mysql:
        image: 'mysql:latest'
        environment:
            - 'MYSQL_DATABASE=mydatabase'
            - 'MYSQL_PASSWORD=secret'
            - 'MYSQL_ROOT_PASSWORD=verysecret'
            - 'MYSQL_USER=myuser'
        ports:
            - '3306:3306'

    prometheus:
        image: prom/prometheus:v2.54.1 # https://hub.docker.com/r/prom/prometheus
        extra_hosts: ['host.docker.internal:host-gateway']
        command:
            - --enable-feature=exemplar-storage
            - --enable-feature=otlp-write-receiver
            - --web.enable-remote-write-receiver
            - --config.file=/etc/prometheus/prometheus.yml
        volumes:
            - prometheus:/prometheus
            - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
        ports:
            - "9090:9090"
    grafana:
        image: grafana/grafana:10.4.10 # https://hub.docker.com/r/grafana/grafana/tags
        extra_hosts: ['host.docker.internal:host-gateway']
        environment:
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
            - GF_AUTH_DISABLE_LOGIN_FORM=true
        volumes:
            - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
            - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
            - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
        ports:
            - "3000:3000"
    tempo:
        image: grafana/tempo:2.4.2 # https://hub.docker.com/r/grafana/tempo/tags and https://github.com/grafana/tempo/releases
        extra_hosts: ['host.docker.internal:host-gateway']
        command: ['-config.file=/etc/tempo.yml']
        volumes:
            - tempo:/tmp/tempo
            - ./docker/grafana/tempo.yml:/etc/tempo.yml:ro
        environment:
            - DEBUG_BLOCK=0
        ports:
            - "3200:3200"    # tempo
            - "4317:4317"  # otlp json http
            - "4318:4318"  # otlp http
            - "2345:2345" # delve debug server

    loki:
        image: grafana/loki:3.1.2 # https://hub.docker.com/r/grafana/loki/tags and https://github.com/grafana/loki/releases
        extra_hosts: ['host.docker.internal:host-gateway']
        command: ['-config.file=/etc/loki/local-config.yaml']
        ports:
            - "3100:3100"
volumes:
    prometheus:
        driver: local
    tempo:
        driver: local
